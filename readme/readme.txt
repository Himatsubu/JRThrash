
JavaRock-Thrash は Java ソースファイルから Verilog HDL ファイルを生成する高位合成ツールです．
ただし，Java で可能な記述を全て合成できるわけではありません．
合成できない記述は，sample の NGClass.java にまとめてあります．

使用方法は，"java -jar JRThrash.jar Javaソースファイルパス" となっています．
その際，クラスごとの設定ファイルとして，configファイル内に "クラス名_config.xml" を用意してください．
上記のファイルが無い場合は，"default_config.xml" が読み込まれます．

なお，mainメソッドは，openjdk.com.sun.tools.javac の Main.java にあるものです．


※現在，Xilinx ISE でのみ論理合成可能なことを確認しています．


----readmeの各フォルダ----

・convert -> Javaソース中に記述したクラスや，メソッド，配列，パラメータリスト等が
             どの様な Verilog HDL のコードに変換されるかについての説明があります．

・configReadme -> コンフィグファイルで設定可能な各項目についての説明があります．

・ipcore -> JavaRock-Thrash で使用可能なIPコアについての説明があります．

・loopUnroll -> アノテーションを用いたループ展開に関する説明があります．



----JavaRock-Thrash の特徴----

・Java の構文を拡張していないため，合成可能なソースはすべて，ソフトウェアとしてコンパイルし，実行可能です．

・Java で利用可能な制御構文はすべて合成できます．(拡張for文は除く)

・多次元配列が利用できます．

・浮動小数点型をサポートしています．（浮動小数点型の演算には，対応するIPコアが必要となります）

・ソース中に記述した算術演算子やキャストに対し，IPコアの割り当てを自動的に行います．
  (コンフィグファイルで，IPコアで処理すると設定した場合)

・ループ展開を使用することで，高スループットな演算器（IPコア）に無駄なくデータを入力し，演算密度の向上が可能です．

・new 演算子を用いたサブモジュールを定義できます．

・Java のスレッド機能を用いて並列処理が記述できます．

・オブジェクトの持つフィールド配列にアクセスできるようになりました．   例: objName.arrayName[i] = x;

・private を付けた配列やメソッドから I/O ポートが作成されなくなりました．


----今後の機能拡張予定----
・基本的な演算以外の機能を持つ RTL の組み込み